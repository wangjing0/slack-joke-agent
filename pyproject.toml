[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "slack-joke-agent"
version = "1.0.1"
description = "Daily Slack agent that sends jokes and trivia with MCP"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Jing Wang", email = "jingwang.physics@gmail.com"}
]
maintainers = [
    {name = "Jing Wang", email = "jingwang.physics@gmail.com"}
]
keywords = ["slack", "mcp", "automation", "jokes"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications :: Chat",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "schedule>=1.2.0",
    "python-dotenv>=1.0.0",
    "anthropic>=0.57.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/wangjing0/slack-joke-agent"
Documentation = "https://github.com/wangjing0/slack-joke-agent#readme"
Repository = "https://github.com/wangjing0/slack-joke-agent.git"
"Bug Tracker" = "https://github.com/wangjing0/slack-joke-agent/issues"

[project.scripts]
slack-agent = "slack_agent:main"

[tool.setuptools]
py-modules = ["slack_agent"]

[tool.setuptools.packages.find]
where = ["."]
include = ["slack_agent*"]

# Black code formatter configuration
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# MyPy type checker configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["slack_agent"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]